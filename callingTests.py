#!/usr/bin/env python3
#
# Read call graph file generated by java-callgraph, find out what test cases call given methods

import os
import sys
import argparse
from callgraph import *
from collections import deque

def BFS(g, root, s):
    q = deque()
    q.append(root)
    visited = set()
    while q:
        root = q.popleft()
        check(root, s)
        visited.add(root)
        if root in g:
            for m in g[root]:
                if m not in visited:
                    print(m)
                    q.append(m)

def check(root, s):
    if root:
        c, m = root.split(':')
        if c.endswith('Test'):
            s.add(c)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Read call graph file generated by java-callgraph, find out what test cases call given methods")
    parser.add_argument('graph', help='call graph file generated by java-callgraph', type=argparse.FileType('r'))
    parser.add_argument('methods', help='methods being called', type=argparse.FileType('r'))
    parser.add_argument('-d', '--dynamic', help='call graph is dynamically generated, defaul: False', action='store_true')
    args = parser.parse_args()
    
    if args.dynamic:
        g1, g2 = loadGraph(args.graph)
    else:
        g1, g2 = loadStaticGraph(args.graph)
    
    methods = loadList(args.methods)
    print("Finish loading graph and methods")
    tests = set()
    for m in methods:
        print(m)
        BFS(g2, m, tests)

    print(len(tests))
    for c in sorted(list(tests)):
        print(c)

