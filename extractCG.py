#!/usr/bin/env python3
#
# Read call graph file generated by java-callgraph, generate graph in adj list format

import os
import sys
import argparse
from callgraph import *

def printGraph(g):
    for caller in sorted(g.keys()):
        adjs = g[caller]
        print('=' * 75)
        print(caller)
        for called in sorted(list(adjs)):
            print("  " + called)

def printGraphCount(g):
    for called in sorted(g.keys()):
        print("{} => {}".format(called, g[called]))

def checkCall(g1, g2):
    for caller in g1:
        adjs = g1[caller]
        for called in adjs:
            for mthd in g2[caller]:
                if mthd not in g2[called]:
                    return False
    return True


#replace double quotes " with two double quotes "", required by csv file format
def doubleQuotes(s):
    return s.replace('"', '""')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Read call graph file generated by java-callgraph, generate graph in adj list format")
    parser.add_argument('graph', help='call graph file generated by java-callgraph', type=argparse.FileType('r'))
    parser.add_argument('-d', '--dynamic', help='call graph is dynamically generated, defaul: False', action='store_true')
    args = parser.parse_args()
    
    #if args.dynamic:
        #g1, g2 = loadGraph(args.graph)
    #else:
        #g1, g2 = loadStaticGraph(args.graph)
    #if checkCall(g1, g2):
        #print("Callers are duplicated!")
    #else:
        #print("Callers are not duplicated!")
    #printGraph(g2)
    g2, gCount = loadGraphWithCount(args.graph)

    printGraphCount(gCount)
